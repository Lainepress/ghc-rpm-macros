# "cabal"
%cabal %{_bindir}/runghc Setup

# configure
%cabal_configure \
%cabal configure --prefix=%{_prefix} --libdir=%{_libdir} --docdir=%{_docdir}/%{name}-%{version} --htmldir=%{ghcdocdir} --libsubdir='$compiler/$pkgid' --ghc %{!?without_shared:--enable-shared} %{?with_dynamic:--ghc-option=-dynamic}

# install
%cabal_install %cabal copy --destdir=${RPM_BUILD_ROOT} -v

# root dir for ghc docs
%ghcdocbasedir %{_docdir}/ghc/html
# (deprecated) pkg doc dir
%ghcdocdir %{ghcdocbasedir}/libraries/%{pkg_name}-%{version}
# top library dir
%ghcpkgbasedir %{_libdir}/ghc-%{ghc_version}
# (deprecated) package dir
%ghcpkgdir %{ghcpkgbasedir}/%{pkg_name}-%{version}

# ghc_gen_filelists [name-version]
%ghc_gen_filelists()\
pkgnamever=%{?1}%{!?1:%{pkg_name}-%{version}} \
pkgname=%{?pkg_name}%{!?pkg_name:$(echo ${pkgnamever} | sed -e "s/\\(.*\\)-.*/\\1/")} \
basepkg=ghc-${pkgname} \
pkgdir=%{ghcpkgbasedir}/${pkgnamever} \
docdir=%{ghcdocbasedir}/libraries/${pkgnamever} \
rm -f ${basepkg}.files ${basepkg}-devel.files ${basepkg}-prof.files \
%if 0%{!?without_shared:1} \
echo "%defattr(-,root,root,-)" > ${basepkg}.files \
if [ -d "${RPM_BUILD_ROOT}${pkgdir}" ]; then \
echo "%dir ${pkgdir}" >> ${basepkg}.files \
echo "%attr(755,root,root) ${pkgdir}/libHS${pkgnamever}-ghc%{ghc_version}.so" >> ${basepkg}.files \
fi \
%endif \
echo "%defattr(-,root,root,-)" > ${basepkg}-devel.files \
if [ -d "${RPM_BUILD_ROOT}%{_docdir}/ghc-${pkgnamever}" ]; then \
echo "%{_docdir}/ghc-${pkgnamever}" >> ${basepkg}%{?without_shared:-devel}.files \
fi \
echo "%{ghcpkgbasedir}/package.conf.d/${pkgnamever}*.conf" >> ${basepkg}-devel.files \
if [ -d "${RPM_BUILD_ROOT}${pkgdir}" ]; then \
find ${RPM_BUILD_ROOT}${pkgdir} -type d | sed "s/^/%dir /" >> ${basepkg}-devel.files \
find ${RPM_BUILD_ROOT}${pkgdir} ! \\( -type d -o -name "*_p.a" -o -name "*.p_hi" -o -name "libHS*.so" \\) >> ${basepkg}-devel.files \
fi \
echo "%defattr(-,root,root,-)" > ${basepkg}-prof.files \
if [ -d "${RPM_BUILD_ROOT}${pkgdir}" ]; then \
find ${RPM_BUILD_ROOT}${pkgdir} \\( -name "*_p.a" -o -name "*.p_hi" \\) >> ${basepkg}-prof.files \
fi \
if [ -d "${RPM_BUILD_ROOT}${docdir}" ]; then \
echo "${docdir}" >> ${basepkg}-devel.files \
fi \
sed -i -e "s!${RPM_BUILD_ROOT}!!g" %{!?without_shared:${basepkg}.files} ${basepkg}-devel.files ${basepkg}-prof.files \
%{nil}

# compiler version
%ghc_version %{!?ghc_version_override:%(ghc --numeric-version)}%{?ghc_version_override}

# create and install package.conf file
# cabal_pkg_conf [name-ver]
%cabal_pkg_conf()\
pkgnamever=%{?1}%{!?1:%{pkg_name}-%{version}} \
%cabal register --gen-pkg-config \
mkdir -p $RPM_BUILD_ROOT%{ghcpkgbasedir}/package.conf.d \
install --mode=0644 ${pkgnamever}.conf $RPM_BUILD_ROOT%{ghcpkgbasedir}/package.conf.d \
%{nil}

# devel pkg basic requires
%ghc_devel_requires Requires(post): ghc = %{ghc_version}\
Requires(postun): ghc = %{ghc_version}\
%if 0%{!?without_shared:1}\
Requires:       ghc-%{-n:%{-n*}}%{!-n:%{pkg_name}} = %{-v:%{-v*}}%{!-v:%{version}}-%{release}\
%endif

# prof pkg basic requires
%ghc_prof_requires Requires:       ghc-%{-n:%{-n*}}%{!-n:%{pkg_name}}-devel = %{-v:%{-v*}}%{!-v:%{version}}-%{release}\
%{nil}

# ghc_lib_package [-n pkgname] [-c cdepslist] [-h pkgdepslist] (-o deprecated no-op)
%ghc_lib_package(n:c:h:o:)\
%define ghc_pkg_name ghc-%{-n:%{-n*}}%{!-n:%{pkg_name}}\
%if 0%{!?without_shared:1}\
%files -n %{ghc_pkg_name} -f %{ghc_pkg_name}.files\
%defattr(-,root,root,-)\
%endif\
\
%ghc_package_devel\
\
%ghc_package_prof\
%{nil}

# ghc_binlib_package [-n pkgname] [-c cdepslist] [-h pkgdepslist] [-l licensetag] [-v version] (-o deprecated no-op)
%ghc_binlib_package(n:c:h:l:v:o:)\
%define local_pkg_name %{-n:%{-n*}}%{!-n:%{pkg_name}}\
%define ghc_pkg_name ghc-%{local_pkg_name}\
%package -n %{ghc_pkg_name}\
Summary:        %{?common_summary}%{!?common_summary:Haskell %{local_pkg_name} library}\
Group:          System Environment/Libraries\
%{-v:Version:        %{-v*}}\
%{-l:License:        %{-l*}}\
\
%description -n %{ghc_pkg_name}\
%{?common_description}%{!?common_description:Haskell %{local_pkg_name} library.}\
\
%if 0%{!?without_shared:1} \
This package provides the shared library.\
%endif \
\
%ghc_lib_package\
%{nil}

%ghc_pkg_recache %{_bindir}/ghc-pkg recache --no-user-package-conf || :

# for docs post and postun
%ghc_reindex_haddock\
%{nil}

# ghc_package_devel [-n pkgname] [-c cdepslist] [-h pkgdepslist] [-l licensetag] [-v version] (-o deprecated no-op)
%ghc_package_devel(n:c:h:l:v:o:)\
%global _use_internal_dependency_generator 0\
%global __find_provides /usr/lib/rpm/ghc-deps.sh --provides %{buildroot}%{ghcpkgbasedir}\
%global __find_requires /usr/lib/rpm/ghc-deps.sh --requires %{buildroot}%{ghcpkgbasedir}\
%define local_pkg_name %{-n:%{-n*}}%{!-n:%{pkg_name}}\
%define ghc_pkg_name ghc-%{local_pkg_name}\
%package -n %{ghc_pkg_name}-devel\
Summary:        %{?common_summary}%{!?common_summary:%{local_pkg_name} library} development files\
Group:          Development/Libraries\
%{-v:Version:        %{-v*}}\
%{-l:License:        %{-l*}}\
%{?ghc_devel_requires}\
%{!-h:%{?ghc_pkg_deps:Requires:       %{ghc_pkg_deps}}}\
%{-h:Requires:       %{-h*}}\
%{!-c:%{?ghc_pkg_c_deps:Requires:       %{ghc_pkg_c_deps}}}\
%{-c:Requires:       %{-c*}}\
%{?ghc_pkg_obsoletes:Obsoletes:      %{ghc_pkg_obsoletes}}\
%{?ghc_pkg_obsoletes:Obsoletes:      %(echo "%{ghc_pkg_obsoletes}" | sed -e "s/\\(ghc-[^, ]*\\)-devel/\\1-doc/g")}\
Obsoletes:      %{ghc_pkg_name}-doc < %{version}-%{release}\
Provides:       %{ghc_pkg_name}-doc = %{version}-%{release}\
\
%description -n %{ghc_pkg_name}-devel\
%{?common_description}%{!?common_description:Haskell %{local_pkg_name} library.}\
\
This package contains the development files.\
\
%post -n %{ghc_pkg_name}-devel\
%ghc_pkg_recache\
%ghc_reindex_haddock\
\
%postun -n %{ghc_pkg_name}-devel\
%ghc_pkg_recache\
%ghc_reindex_haddock\
\
%files -n %{ghc_pkg_name}-devel -f %{ghc_pkg_name}-devel.files\
%defattr(-,root,root,-)\
%{nil}

# ghc_package_prof [-n pkgname] [-c cdepslist] [-h pkgdepslist] [-l licensetag] [-v version]
%ghc_package_prof(n:h:l:v:)\
%define local_pkg_name %{-n:%{-n*}}%{!-n:%{pkg_name}}\
%define ghc_pkg_name ghc-%{local_pkg_name}\
%package -n %{ghc_pkg_name}-prof\
Summary:        Profiling libraries for %{?common_summary}%{!?common_summary:%{local_pkg_name}}\
Group:          Development/Libraries\
%{-v:Version:        %{-v*}}\
%{-l:License:        %{-l*}}\
%{?ghc_prof_requires}\
%{!-h:%{?ghc_pkg_deps:Requires:       %(echo "%{ghc_pkg_deps}" | sed -e "s/\\(ghc-[^, ]*\\)-devel/\\1-prof/g")}}\
%{-h:Requires:       %(echo "%{-h*}" | sed -e "s/\\(ghc-[^, ]*\\)-devel/\\1-prof/g")}\
%{?ghc_pkg_obsoletes:Obsoletes:      %(echo "%{ghc_pkg_obsoletes}" | sed -e "s/\\(ghc-[^, ]*\\)-devel/\\1-prof/g")}\
\
%description -n %{ghc_pkg_name}-prof\
%{?common_description}%{!?common_description:Haskell %{local_pkg_name} library.}\
\
This package contains the profiling library.\
\
%files -n %{ghc_pkg_name}-prof -f %{ghc_pkg_name}-prof.files\
%defattr(-,root,root,-)\
%{nil}

# ghc_strip_dynlinked
%ghc_strip_dynlinked\
%if 0%{!?__debug_package:1}\
find $RPM_BUILD_ROOT -type f -exec sh -c "file {} | grep -q 'dynamically linked'" \\; -exec strip "{}" \\;\
%endif

# ghc_bin_build
%ghc_bin_build\
%cabal_configure\
%cabal build

# ghc_lib_build [name-version]
%ghc_lib_build()\
%{?1:cd %1}\
%cabal_configure -p %{?1:--docdir=%{_docdir}/ghc-%1 --htmldir=%{ghcdocbasedir}/libraries/%1}\
%cabal build\
%cabal haddock %{!?without_hscolour:--hyperlink-source}\
%{?1:cd -}\
%{nil}

# install bin package
%ghc_bin_install\
%cabal_install\
%ghc_strip_dynlinked

# ghc_lib_install [name-version]
%ghc_lib_install()\
%{?1:cd %1}\
%cabal_install\
%cabal_pkg_conf\
%{?1:cd -}\
%ghc_gen_filelists\
%{!?1:%ghc_strip_dynlinked}\
%{nil}
